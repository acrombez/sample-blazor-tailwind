@implements IAsyncDisposable
@inject ILocalStorageService localStorage
@inject IJSRuntime JS

<fieldset class="fieldset p-4 bg-base-100 border border-base-300 rounded-box w-64">
    <label class="fieldset-label">
        <input type="checkbox" class="toggle" checked="@_darkMode" @onchange="ToggleTheme" />
        Dark
    </label>
</fieldset>

@code {
    private bool _darkMode;
    private IJSObjectReference _themeModule = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _themeModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Layout/DarkModeToggle.razor.js");

            var theme = await localStorage.GetItemAsStringAsync("theme");
            _darkMode = theme == "dark" ? true : false;
            StateHasChanged();

            await _themeModule.InvokeVoidAsync("setTheme", theme);
        }
    }

    private async Task ToggleTheme(ChangeEventArgs args)
    {
        _darkMode = (bool)args.Value!;
        var theme = _darkMode ? "dark" : "light";
        await localStorage.SetItemAsStringAsync("theme", theme);

        await _themeModule.InvokeVoidAsync("setTheme", theme);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_themeModule is not null)
        {
            await _themeModule.DisposeAsync();
        }
    }
}